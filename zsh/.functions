#!/usr/bin/env bash

# Create a new directory and enter it
function mkcd() {
  mkdir -p "$@" && cd "$_";
}

# cd into directory then list all files
function cdl() {
  cd $1 && ls -lFAh --color;
}

# Change working directory to the top-most Finder window location
# short for `cdfinder`
function cdf() {
  cd "$(osascript -e 'tell app "Finder" to POSIX path of (insertion location as alias)')";
}

# Remove current directory
function rmcd() {
  local currdir="$(pwd)";
  cd .. && rm -rf $currdir;
}

# Start an HTTP server from the current directory, optionally specifying the port
function server() {
  local port="${1:-8000}";
  sleep 1 && open "http://localhost:${port}/" &
  python3 -m http.server $port;
}

# `o` with no arguments opens the current directory, otherwise opens the given
# location
function o() {
	if [ $# -eq 0 ]; then
		open .;
	else
		open "$@";
	fi;
}

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
function tre() {
  tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX;
}

# Generate password, optionally specifying the length
function genpass() {
  local length="${1:-20}";
  openssl rand -base64 $length;
}

# Generate uuid in lowercase
function uuid() {
  uuidgen | tr "[:upper:]" "[:lower:]"
}

# create .tar.gz
function targz() {
  tar -zcvf $1.tar.gz $1; rm -r $1;
}

# extra .tar.gz
function untargz() {
  tar -zxvf $1; rm -r $1;
}

# Clone git repo and cd into it
function clone() {
  git clone "$1" && cd "$(basename "$1" .git)";
}

# Show weather
function now() {
  curl https://wttr.in/\?1;
}
